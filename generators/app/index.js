/**
 * Created by Zhengfeng.Yao on 16/10/9.
 */
'use strict';
const Generators = require('yeoman-generator');
const utils = require('../../utils');
const prompts = require('./prompts');
const path = require('path');
const fs = require('fs');
const recursive = require('recursive-readdir');

class AppGenerator extends Generators.Base {
  constructor(args, options) {

    super(args, options);

    // Make options available
    this.option('skip-welcome-message', {
      desc: 'Skip the welcome message',
      type: Boolean,
      defaults: false
    });
    this.option('skip-install');

    this.config.save();
  }

  initializing() {

    if(!this.options['skip-welcome-message']) {
      this.log(require('yeoman-welcome'));
      this.log('React脚手架，编译工具aegis-tools.\n');
    }
  }

  prompting() {

    return this.prompt(prompts(this.options)).then((answers) => {

      // Make sure to get the correct app name if it is not the default
      if(answers.appName !== utils.yeoman.getAppName()) {
        answers.appName = utils.yeoman.getAppName(answers.appName);
      }

      // Set needed global vars for yo
      this.appName = answers.appName;
      this.language = answers.language;
      this.style = answers.style;
      this.router = answers.router;
      this.flux = answers.flux;
      this.server = answers.server;

      // Set needed keys into config
      this.config.set('appName', this.appName);
      this.config.set('appPath', this.appPath);
      this.config.set('language', this.language);
      this.config.set('style', this.style);
      this.config.set('router', this.router);
      this.config.set('flux', this.flux);
      this.config.set('server', this.server);
    });
  }

  configuring() {
    const template = [
      'react',
      this.flux == 'none' ? '' : this.flux,
      this.router == 'none' ? '' : this.router,
      this.language == 'babel' ? '' : this.language,
      this.server == 'webpack' ? '' : this.server,
      'boilerplate'
    ].filter(x => !!x).join('-');
    const sourceRoot = path.join(__dirname, `../../templates/${template}`);
    this.sourceRoot(sourceRoot);
    let defaultSettings = this.fs.readJSON(`${sourceRoot}/package.json`);
    let packageSettings = {
      name: this.appName,
      private: true,
      version: '0.0.1',
      description: `${this.appName} - Generated by generator-aegis-react`,
      scripts: defaultSettings.scripts,
      repository: '',
      keywords: [],
      author: 'Your name here',
      devDependencies: defaultSettings.devDependencies,
      dependencies: defaultSettings.dependencies
    };

    // Add needed loaders if we have special styles
    // let styleConfig = utils.config.getChoiceByKey('style', this.style);
    // if(styleConfig && styleConfig.packages) {
    //
    //   for(let dependency of styleConfig.packages) {
    //     packageSettings.devDependencies[dependency.name] = dependency.version;
    //   }
    // }
    packageSettings.devDependencies['aegis-tools'] = '^1.0.6';

    this.fs.writeJSON(this.destinationPath('package.json'), packageSettings);
  }

  writing() {
    const excludeList = [
      'LICENSE',
      'README.md',
      'CHANGELOG.md',
      'node_modules',
      'logs',
      'coverage',
      'build',
      '.idea',
      'package.json',
      '.istanbul.yml',
      '.travis.yml'
    ];

    const excludeStyles = ['css', 'less', 'sass', 'scss', 'styl']
      .filter(style => style !== this.style)
      .map(style => `*.${style}`);
    const options = {
      style: this.style
    };

    // Get all files in our repo and copy the ones we should
    fs.readdir(this.sourceRoot(), (err, items) => {

      for(let item of items) {

        // Skip the item if it is in our exclude list
        if(excludeList.indexOf(item) !== -1) {
          continue;
        }

        // Copy all items to our root
        let fullPath = path.join(this.sourceRoot(), item);
        if(fs.lstatSync(fullPath).isDirectory()) {
          recursive(fullPath, excludeStyles, (err, files) => {
            files
              .map(file => file.substring(this.sourceRoot().length + 1))
              .forEach(file => this.fs.copyTpl(this.templatePath(file), this.destinationPath(file), options));
          });
        } else {
          if (item === '.npmignore') {
            this.copy(item, '.gitignore');
          } else {
            this.copy(item, item);
          }
        }
      }
    });
  }

  install() {
    if(!this.options['skip-install']) {
      this.spawnCommandSync('nrm', ['use taobao']);
      this.installDependencies({ bower: false });
    }
  }

  end() {
    if(!this.options['skip-start']) {
      // this.spawnCommand('npm', ['run start'], {cwd: this.destinationRoot()})
      // .on('exit', function (err) {
      //       if (err) {
      //           this.log.error('task failed. Error: ' + err);
      //       } else {
      //           this.emit('nextTask');
      //       }
      //   });
    }
  }
}

module.exports = AppGenerator;
